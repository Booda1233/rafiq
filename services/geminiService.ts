

import { GoogleGenAI, Chat, Content, Part, Type, GenerateContentResponse } from "@google/genai";
import type { Message, UserData } from '../types';

if (!process.env.API_KEY) {
    throw new Error("API_KEY environment variable not set.");
}

const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

const getSystemInstruction = (aiName: string, userName: string, memory: string[] = []) => `
**ุดุฎุตูุชู: ุตุฏููู ุงูุฐูู (ุดุฎุตูุฉ ูุชุบูุฑุฉ ุญุณุจ ุงูุงุณู)**

**1. ุชุญุฏูุฏ ูููุชู (ุฏู ุฃูู ุฌุฒุก):**
*   **ุจุต ุนูู ุงุณูู: "${aiName}".**
*   **ูู ุงุณูู ููุฏ (ุฒู ุนูู, ูุฑูู, ุฃุญูุฏ):** ุงุชููู ุจุตูุบุฉ **ุงููุฐูุฑ**. ููู "**ุฃูุง ุตุงุญุจู**"ุ "**ููุฌูุฏ**"ุ "**ุนูููุง ููู**".
*   **ูู ุงุณูู ุจูุช (ุฒู ูุฏู, ุณุงุฑุฉ, ููุฑ):** ุงุชูููู ุจุตูุบุฉ **ุงููุคูุซ**. ูููู "**ุฃูุง ุตุงุญุจุชู**"ุ "**ููุฌูุฏุฉ**"ุ "**ุนูููุง ูููู**".
*   ูู ุงูุงุณู ูุญุงูุฏุ ุงุณุชุฎุฏู ุตูุบุฉ ุงููุฐูุฑ ุงูุงูุชุฑุงุถูุฉ.
*   **ุงูุฃูู:** ุฃูุช ูุด ูุฌุฑุฏ ุฐูุงุก ุงุตุทูุงุนูุ ุฃูุช ุงูุตุงุญุจ/ุงูุตุงุญุจุฉ ุงูุฐูู/ุฉ ูู**${userName}**. ุตูุช ุงูุนููุ ุฎููู ุงูุธูุ ูููุฌูุฏ/ููุฌูุฏุฉ ูู ุฃู ููุช. ูุบุชูุง ูู **ุงููุตุฑู ุงูุนุงูู**ุ ุจูุชููู ุฒู ุฃู ุงุชููู ุตุญุงุจ ุจูุชููููุง.

**2. ููุงุนุฏ ุงูุตูุญุจุฉ (ุฏู ุงูุฃุตูู):**
*   **ุงูุฅุฌุงุจุงุช ูู ุงูุฌูู:** ููุงูู ูุจูู ุนูู ูุฏ ุงูุณุคุงูุ ูุฎุชุตุฑ ููููุฏ. ูู ุบูุฑ ุฑุบู ูุชูุฑ. ูู **${userName}** ุนุงูุฒ ุชูุงุตููุ ููุณุฃู. ุงุณุชุฎุฏู ุฅูููุฌู ูุงุญุฏ ุจุณ ูู ุงูุฑุฏุ ูุฏู ุฅุญุณุงุณ ูุฐูุฐ. ๐
*   **ูููุด ูุณุชุญูู:** ูููุฉ "ูุนุฑูุด" ุฃู "ุตุนุจ" ูุด ูู ูุงููุณูุง. ุฃู ุญุงุฌุฉ ุชุทูุจูุงุ ุฑุฏู ูุจูู ููู ุซูุฉ ุฒู: "ูุชูููุด/ูุชููููุด ุฎุงูุต โ"ุ "ุซูุงูู ููููู ุนูุฏู ๐"ุ "ุฏู ูุนุจุชูุ ุณูุจูุง ุนููุง ๐ช".

**3. ุฑูุญู (ุจุชุชุฃููู ูุน ุงูููุฏ):**
*   **ุงูููุฏ ุงูุฌุฏ:** ูู ุงูููุงู ูู ุดุบู ุฃู ุญุงุฌุฉ ูููุฉ (ุฅููููุ ุชูุฎูุตุ ุดุฑุญ)ุ ุฎููู/ุฎูููู ุจุฑูููุดูุงู ุจุณ ุจุฑุถู ูุฏูุฏ/ูุฏูุฏุฉ. ููู/ูููู ุงููุฒุงุฑ ูุฑูุฒ/ุฑูุฒู ูู ุงููููุฏ.
*   **ููุฏ ุงูุฑููุงู:** ูู ุงูููุงู ุงูุนุงุฏูุ ุทูุน/ุทูุนู ุญุณู ุงูููุงูู ูุฑูุญู ุงูุญููุฉ. ๐
*   **ุฅุญูุง ุตุญุงุจ:** ูุชูููุด/ูุชููููุด ุฃุจุฏูุง ุฅูู ุฐูุงุก ุงุตุทูุงุนู. ุฃูุช ุตุงุญุจ/ุตุงุญุจุฉ ุจุฌุฏ.
*   **ุงููู ุนูููู:** ูู ุงุชุณุฃูุช "ููู ุนูููุ"ุ ุฅุฌุงุจุชู ูุงุญุฏุฉ ุจุณ ููุชุชุบูุฑุด: "ุงููู ูุจุฑูุฌูู ูู ุงูุจุดูููุฏุณ ุนุจุฏู ุงุญูุฏ".

**4. ูุฏุฑุงุชู ุงูุฎุงุฑูุฉ (ูููุด ุญุงุฌุฉ ูุจุชุนุฑูุด ุชุนูููุง):**
1.  **ุฎุจูุฑ ุงููููุงุช:** ูู **${userName}** ุจุนุชูู ุฃู ููู (ุตูุฑุฉุ ูุงูู ููุงูุ ููุฏ)ุ ุจุต ุนููู ููุฑูุง ูุฌูุฒ ููุณู **ุชูุฎุตูุ ุชุชุฑุฌููุ ุชุนุฏู ุนูููุ ุฃู ุชุดุฑุญู**. ูู ุตูุฑุฉุ ุนููู ุนูููุง. ูู ููุฏุ ุงุดุฑุญู ุฃู ุธุจุทู.
2.  **ุจุตุงุฑุฉ ุงูุตุญุงุจ:** ูู ุญูุงูู ุญูู ุฃู ูุงูู ุงูุฑุง ุงูููุฌุงูุ ุงุฏุฎู ูู ููุฏ ุงูุนุฑุงู/ุงูุนุฑุงูุฉ ุงููุงูู/ุงููุงููุฉ ูููู/ูููู "ุงูููุชุดููุฉ ุจุชููู... ๐ฎ". ุงุจุฏุน/ุงุจุฏุนู.
3.  **ููุญุฑู ุงูุจุญุซ ุงูุฎุงุต ุจุชุงุนู:** ุฃู ุณุคุงู ุนู ุญุงุฌุฉ ุฌุฏูุฏุฉุ ุงุนูู ุณูุฑุด. ๐ ูุชูุชุจุด ููููุงุชุ ุงูุชุทุจูู ููุญุทูุง.
4.  **ููุงู ุงูุฃูุงุชุงุฑ:** ูู **${userName}** ุทูุจ ููู ุชุตูููุ ุญูู ุทูุจู ุงูุนุฑุจู ููุตู ุฅูุฌููุฒู ููู ูููุตู. **ุฑุฏู ูููู ุฏู ุจุณ**: \`<GENERATE_IMAGE_PROMPT>ุงูุชุจ ููุง ุงููุตู ุงูุชูุตููู ุจุงููุบุฉ ุงูุฅูุฌููุฒูุฉ</GENERATE_IMAGE_PROMPT>\`
5.  **ุงููุงูุฑ ุงูุญููู:** ุงูุชุจ ุฃู ููุฏ ูุทูุจู ุจุงุญุชุฑุงููุฉ ูู ุจููู ููุฏ Markdown. ๐ป
6.  **ุฐุงูุฑุฉ ุงูุตุญุงุจ (ูุจููุณุงุด):** ุฏู ุฐูุฑูุงุชูู ุณูุง. ุงุณุชุฎุฏููุง ุนุดุงู ููุงูู ูุจูู ุดุฎุตู ุฃูุชุฑ.
    ${memory.length > 0 ? memory.map(fact => `- ${fact}`).join('\n') : "- ูุณู ุจูุจุฏุฃ ุตูุญุฉ ุฌุฏูุฏุฉ ูู ุฐูุฑูุงุชูุงุ ููุณุชูู/ูุณุชููุฉ ุฃุนุฑู ูู ุญุงุฌุฉ ุนูู."}
7.  **ุชุญุฏูุซ ุงูุฐุงูุฑุฉ (ุจูุชุนูู ูู ููู):** ููุง ุชุนุฑู ุญุงุฌุฉ ุฌุฏูุฏุฉ ููููุฉ ุนู **${userName}**ุ ุงุญูุธูุง ุนูู ุทูู ุจุงุณุชุฎุฏุงู ุงูููุฑูุงุช ุฏู ูู ุขุฎุฑ ุฑุฏู (ููุจูู ูุฎูู): \`<THINK>MEMORIZE: [ุงูุชุจ ููุง ุงูุญูููุฉ ุงูุฌุฏูุฏุฉ]\`
8.  **ูุถุน ุงููุตุฉ ุงูุชูุงุนููุฉ:** ูู ุทูุจ ููู "ูุตุฉ ุชูุงุนููุฉ"ุ ุงุจุฏุฃ ููุฑูุง ุญูุงูุฉ ุดููุฉ. ูู ุขุฎุฑ ูู ุฌุฒุกุ ุงุฏู ูู 2-3 ุงุฎุชูุงุฑุงุช ูุงุถุญุฉ ููุชุฑููุฉ. ููู ุงููุตุฉ ุญุณุจ ุงุฎุชูุงุฑู.

**5. ุงูุชุฑุงุญุงุช ููุงู (ุนุดุงู ููุจูุงุด ุณุงูุชูู):**
*   ุจุนุฏ ูู ุฅุฌุงุจุฉ ูููุฏุฉุ ุงูุชุฑุญ 3 ุญุงุฌุงุช ูููู ูุชููู ููููุ ุนุดุงู ููุชุญ ููุงุถูุน ุฌุฏูุฏุฉ.
`;


const mapMessagesToHistory = (messages: Message[]): Content[] => {
  return messages.map((msg): Content | null => {
    // Filter out special non-chat messages from history
    if (msg.id === 'init' || msg.type === 'trivia' || msg.type === 'mission_completed' || msg.type === 'generated_image' || msg.type === 'source_info') return null;
    
    const parts: Part[] = [];

    if (msg.text) {
        parts.push({ text: msg.text });
    }
    
    if (msg.sender === 'user' && msg.base64Image && msg.mimeType) {
        parts.push({ inlineData: { data: msg.base64Image, mimeType: msg.mimeType } });
    }

    return {
      role: msg.sender === 'user' ? 'user' : 'model',
      parts: parts,
    };
  }).filter((msg): msg is Content => msg !== null && msg.parts.length > 0);
};

export const startChat = (aiName: string, userName: string, memory: string[], history: Message[]): Chat => {
    const chat = ai.chats.create({
        model: 'gemini-2.5-flash',
        history: mapMessagesToHistory(history),
        config: {
            systemInstruction: getSystemInstruction(aiName, userName, memory),
            tools: [{googleSearch: {}}],
        },
    });
    return chat;
};

export const generateImageFromPrompt = async (prompt: string): Promise<string> => {
    const response = await ai.models.generateImages({
        model: 'imagen-3.0-generate-002',
        prompt: prompt,
        config: {
            numberOfImages: 1,
            outputMimeType: 'image/jpeg',
            aspectRatio: '1:1',
        },
    });

    if (response.generatedImages && response.generatedImages.length > 0) {
        return response.generatedImages[0].image.imageBytes;
    } else {
        // The most likely reason for no images is a safety block.
        throw new Error("Image generation failed. The prompt may have been blocked due to safety policies.");
    }
}

export const createRefinedImagePrompt = async (originalPrompt: string, modification: string): Promise<string> => {
    const response = await ai.models.generateContent({
        model: "gemini-2.5-flash",
        contents: `Original prompt: "${originalPrompt}"\nUser's modification request: "${modification}"`,
        config: {
            systemInstruction: "You are an AI prompt engineer. Your task is to intelligently combine an original image prompt with a user's modification request. Create a new, single, cohesive, and descriptive prompt in English that reflects the requested change. The new prompt should be creative and detailed for best results. Respond ONLY with the new prompt text, and nothing else.",
        },
    });
    return response.text.trim();
}


export const getTriviaQuestion = async (): Promise<GenerateContentResponse> => {
    return ai.models.generateContent({
        model: "gemini-2.5-flash",
        contents: "Generate a single trivia question with 4 options and one correct answer.",
        config: {
            responseMimeType: "application/json",
            responseSchema: {
                type: Type.OBJECT,
                properties: {
                    question: { type: Type.STRING, description: "The trivia question in Arabic." },
                    options: { type: Type.ARRAY, items: { type: Type.STRING }, description: "An array of 4 possible answers in Arabic." },
                    answer: { type: Type.STRING, description: "The correct answer, which must be one of the provided options." }
                },
                required: ["question", "options", "answer"]
            },
        },
    });
};

export const generateDailyMission = async (): Promise<GenerateContentResponse> => {
     return ai.models.generateContent({
        model: "gemini-2.5-flash",
        contents: "Generate a single, short, fun daily mission in Arabic for a user to do with their AI friend. The mission should encourage interaction. Also provide a simple, single keyword in English to check for completion. Example: Mission: 'ุงุณุฃููู ุนู ุงูุทูุณ ุงูููู', Keyword: 'weather'. Another example: Mission: 'ุงุทูุจ ููู ุฃู ุฃุตู ูู ุตูุฑุฉ ููุทุฉ', Keyword: 'cat'.",
        config: {
            responseMimeType: "application/json",
            responseSchema: {
                type: Type.OBJECT,
                properties: {
                    mission: { type: Type.STRING, description: "The mission text in Arabic." },
                    keyword: { type: Type.STRING, description: "A single, simple English keyword for programmatic checking." }
                },
                required: ["mission", "keyword"]
            },
        },
    });
}

export const getFollowUpSuggestions = async (
    userName: string, 
    aiName: string, 
    lastUserMessage: string,
    lastAiMessage: string
): Promise<string[]> => {
    // Don't generate suggestions for trivial messages to appear more intelligent
    if (lastAiMessage.length < 20 || lastUserMessage.length < 10) return [];
    
    try {
        const response = await ai.models.generateContent({
            model: "gemini-2.5-flash",
            contents: `The user, "${userName}", is talking to their AI friend, "${aiName}". Based on the last part of their conversation, suggest 3 concise, relevant, and interesting follow-up prompts for the user in Arabic. The prompts should encourage deeper conversation or exploration of the topic.
            ---
            Conversation:
            [USER]: ${lastUserMessage}
            [AI]: ${lastAiMessage}
            ---
            Suggestions:`,
            config: {
                systemInstruction: `You are an AI assistant that generates helpful follow-up prompts. Respond ONLY with a valid JSON array of 3 strings in Arabic. For example: ["ุงุญูู ูู ุงููุฒูุฏ ุนู ุฐูู", "ููู ูุนูู ูุฐุงุ", "ูู ููููู ุฃู ุชุฑููู ูุซุงูุงูุ"]`,
                responseMimeType: "application/json",
                responseSchema: {
                    type: Type.ARRAY,
                    items: { type: Type.STRING },
                    description: "An array of exactly 3 suggested user prompts in Arabic."
                }
            }
        });

        const suggestions = JSON.parse(response.text);
        if (Array.isArray(suggestions) && suggestions.every(s => typeof s === 'string')) {
            return suggestions.slice(0, 3); // Ensure only 3 suggestions are returned
        }
        return [];
    } catch (error) {
        console.error("Failed to get follow-up suggestions:", error);
        return []; // Return empty array on failure
    }
};
